#!/usr/bin/python
#Tracks and prints notification history

#########
#Imports#
#########
import os, signal, subprocess, time, atexit, binascii, re, datetime, argparse, sys
import array, struct, string,random

########
#Colors#
########
class col:
  BLN   =   '\033[0m'            # Blank
  UND   =   '\033[1;4m'          # Underlined
  INV   =   '\033[1;7m'          # Inverted
  CRT   =   '\033[1;41m'         # Critical
  BLK   =   '\033[1;30m'         # Black
  RED   =   '\033[1;31m'         # Red
  GRN   =   '\033[1;32m'         # Green
  YLW   =   '\033[1;33m'         # Yellow
  BLU   =   '\033[1;34m'         # Blue
  MGN   =   '\033[1;35m'         # Magenta
  CYN   =   '\033[1;36m'         # Cyan
  WHT   =   '\033[1;37m'         # White

####################
#User-set Constants#
####################
LOGFILE = "/tmp/nd-logger.logfile" #File where we store our logs
PIDFILE = "/tmp/nd-logger.pid"

#############################
#Immutable, global constants#
#############################
#Command to run dbus-monitor
CMD = ["dbus-monitor", "interface='org.freedesktop.Notifications'"]
#The name of this program
SELFSTRING = "notify-history-simulator"
#Programs for which we should not capture output
SKIPLIST = [
  SELFSTRING,  #Skip recording outself
  "mynotice",  #Skip recording my notice script
  "ignore",
  "hidden",
]
#Regex to skip over semicolons in quotes
SEMICOLON = re.compile(r'''((?:[^;"']|"[^"]*"|'[^']*')+)''')
#Regex to skip over colons in quotes
COLONSPLIT = re.compile(r'''((?:[^:"']|"[^"]*"|'[^']*')+)''')
#Regex to skip over spaces in quotes
SPACESPLIT = re.compile(r'''((?:[^\ "']|"[^"]*"|'[^']*')+)''')
#TARGA file constants (see http://gpwiki.org/index.php/TGA)
TGA_StructFmt    = "<BBBHHBHHHHBB"
TGA_Offset       = 0
TGA_ColorType    = 0
TGA_ImageType    = 2
TGA_PaletteStart = 0
TGA_PaletteLen   = 0
TGA_PalBits      = 8
TGA_XOrigin      = 0
TGA_YOrigin      = 0
TGA_Orientation  = 0

###############
#Other Globals#
###############
_color=col.YLW       #Current global color we're printing in
_printing=False      #Whether we're printing (dbus entry is from desktop notifications) or not
_snum=0              #Number of strings we've encountered so far
_nprint=10           #Number of messages to print
_sleeptime=0.2       #Time between messages
_persist=False       #When true, simulated notifications persist on screen until dismissed
_quiet=False         #When true, the notification history daemon prints only error messages
_simulate=False      #When true, display recent notifications as actual notifications (false = stdout)
_skipself=False      #Whether we should skip the current notification
_lasttime=0          #Timestamp of the last notification recorded
_showtime=3000       #Time to display each notification in simulation mode
_curstring=""        #Current multiline string we're parsing
_midstring=False     #Whether our scanner is currently in the middle of a multiline string
_midarray=False      #Whether our scanner is currently in the middle of a multiline byte array
_icondata=False      #Whether we're currently looking at icon_data
_iconintdata=[]      #Integer data for icon_data (Format: [x,y,stride,8,bytes per color])

######
#Defs#
######
#Send signall /sig/ to process with pid /pid/
def sig_pid(pid,sig):
  #Courtesy of http://stackoverflow.com/questions/788411/check-to-see-if-python-script-is-running
  try:             os.kill(pid, sig)
  except OSError:  return
  else:            return pid
#Try to open the pidfile for any currently-running notify-history daemon, exiting if it's an active process
def write_pidfile_or_die(path_to_pidfile):
  if os.path.exists(path_to_pidfile):
    pid = int(open(path_to_pidfile).read())
    if sig_pid(pid,0):
      if _simulate:
        print(col.WHT + "No simulating while daemon is running! (use -f to force or -k to kill)" + col.BLN)
      else:
        print(col.WHT + "The daemon is currently running!" + col.BLN)
      raise SystemExit
    else:
      os.remove(path_to_pidfile)
  open(path_to_pidfile, 'w').write(str(os.getpid()))
  return path_to_pidfile
#Execute the command /command/ in a subprocess, logging its output to the global logfile
def execute(command):
  global _log
  pro = subprocess.Popen(command, stdout=subprocess.PIPE)
  lines_iterator = iter(pro.stdout.readline, b"")
  _log = open(LOGFILE, 'a+')
  if not _quiet:
    print(col.WHT + "Logging started!" + col.BLN)
  for line in lines_iterator:
    parseline(line.decode('utf-8'))
  _log.close()
#Print pretty text on the string with the global color, writing the uncolored text to a log
def pprint(t,s,i=0):
  global _log, _firstline, _color
  #Don't print anything simulated
  if not _quiet and sys.stdout.isatty():
    print(" "*i + _color + t + ": " + s + col.BLN)
  if _skipself:
    return
  if i == 0:
    _log.write("\n")
  _log.write(t+":"+s+";")
  _log.flush()
#Replace newlines (and special HTML characters) with more innocuous characters
def filterstring(string):
  s = string.replace("\n","\\n") #.replace("<","&lt;").replace(">","&gt;").replace("&","&amp;")
  return s
#Print and log a single line
def logline(line):
  global _snum, _color, _skipself, _curstring, _midstring, _midarray, _icondata
  if _icondata:
    m = re.search('^[\ ]*array\ of\ bytes\ \[[\ ]*$', line)
    #If there's an array of bytes, it's a multiline byte array!
    if m:
      _midarray = True
      return
  else:
    m = re.search('^[\ ]*string\ \"icon_data\"[\ ]*$', line)
    #If we find the above string, we're looking at icon data!
    if m:
      _icondata = True
      return
    m = re.search('^[\ ]*string\ \"([^\"]*[^\"])$', line)
    #If there's no closing quote, it's a multiline string!
    if m:
      _midstring = True
      _curstring += m.group(1)
      return
  m = re.search('string\ \"(.*)\"', line)
  if m:
    _snum += 1
    if _snum == 1:
      if m.group(1) in SKIPLIST:
        _skipself=True
        _color=col.BLK
      else:
        _color=col.CYN
      pprint("TIME",_lasttime)
      _color=col.YLW
      pprint("CALLER",m.group(1),2)
    elif _snum == 2:
      pprint("ICON",m.group(1),2)
    elif _snum == 3:
      pprint("TITLE",'"'+filterstring(m.group(1))+'"',2)
    elif _snum == 4:
      pprint("BODY",'"'+filterstring(m.group(1))+'"',2)
  m = re.search('.*variant.*byte\ (.)', line)
  if m:
    pprint ("URGENCY",m.group(1),2)
  m = re.search('.*variant.*string\ \"(.*)\"', line)
  if m:
    pprint ("CATEGORY",m.group(1),2)
  m = re.search('[\ ]+int32\ ([0-9-]*)', line)
  if m:
    if _icondata:
      _iconintdata.extend([m.group(1)])
      print(col.RED+"  IINT"+str(len(_iconintdata)),m.group(1))
    else:
      pprint ("LENGTH",m.group(1),2)
#Print and log a continued multiline
def logmultiline(line):
  global _snum, _curstring, _midstring
  m = re.search('^([^\"]*)\"$', line)
  if m:
    _curstring += m.group(1)
    _midstring = False
    _snum += 1
    pprint("BODY",'"'+filterstring(_curstring)+'"',2)
    _curstring=""
  else:
    _curstring += line
#Print and log a byte array
def logbytearray(line):
  global _curstring, _midarray, _icondata, _iconintdata
  m = re.search('^[\ ]*\][\ ]*$', line)
  if m:
    _midarray = False
    _icondata = False
    #After logging the bytestring from dbus-monitor, strip all whitespace
    purestring = re.sub('[\s+]', '', _curstring)
    #Conver the string to hexadecimal
    imagedata=bytearray.fromhex(purestring)
    #Generate a random filename for a temporary image
    tmpfile = "/tmp/nd-icon-"+namegen()+".tga"
    #Save the hex data to an image
    savedatatoimage(int(_iconintdata[0]),int(_iconintdata[1]),int(_iconintdata[4]),imagedata,tmpfile)
    #Write the temporary file's name to the logger
    pprint("ICON",tmpfile,2)
    #Reset the icon's integer data and the _curstring variable
    _iconintdata = []
    _curstring=""
  else:
    #Append the current line to the hex data
    _curstring += line
#Scan and parse each relevant line from the dbus-monitor, recording to the logfile when necessary
def parseline(line):
  global _printing, _snum, _color, _skipself, _lasttime
  if not _printing:
    m = re.search('member=Notify', line)
    if m: #This regex signifies the beginning of a desktop notification entry
      time = re.search('time=([0-9\.]*)', line).group(1)
      basetime = time.split(".")
      _lasttime = datetime.datetime.fromtimestamp(int(basetime[0])).strftime('%Y-%m-%d-%H-%M-%S') + "-" + basetime[1]
      _printing=True
  else:
    m = re.search('signal\ time|method\ call', line)
    if m: #This regex signifies the end of a desktop notification entry
      _printing=False
      _skipself=False
      _snum=0
  if _printing:
    _color=col.YLW
    if _midarray:
      logbytearray(line)
    elif _midstring:
      logmultiline(line)
    else:
      logline(line)
#Build a notify-send command out of the parts of a logfile entry
def buildCommandList(fields):
  length = -1; urg = 1; icon = ""; b = ""; cat = ""; summ = ""; app = SELFSTRING
  cmdlist=["notify-send"]
  for p in fields:
    p = COLONSPLIT.split(p)[1::2]
    if (len(p) < 2):                 continue
    if p[0] == "ICON":               icon    = p[1]
    elif p[0] == "TITLE":            summ    = p[1].replace('\\n', '\n')
    elif p[0] == "BODY" and not b:   b       = p[1].replace('\\n', '\n')
    elif p[0] == "CATEGORY":         cat     = p[1]
    elif p[0] == "URGENCY":          urg     = p[1]
    elif p[0] == "LENGTH":           length  = p[1]
  if icon:                         cmdlist.extend(["-i",icon])
  if cat:                          cmdlist.extend(["-c",cat])
  if _showtime > 0:                cmdlist.extend(["-t",str(_showtime)])
  elif length and length != "-1":  cmdlist.extend(["-t",length])
  if app and app != "notify-send": cmdlist.extend(["-a",app])
  if _persist:                     cmdlist.extend(["-u","critical"])
  if b != "" and summ != "":       cmdlist.extend([summ[1:-1],b[1:-1]])
  elif b != '""':                  cmdlist.extend([b[1:-1]])
  else:                            cmdlist.extend([summ[1:-1]])
  return cmdlist
#Display recent notifications, either in the terminal or with real notifications
def display(simulate):
  #If we have no logfile, we can't display our log!
  if not os.path.exists(LOGFILE):
    print(col.WHT + "No recent notifications to show!")
    sys.exit()
  #Get our messages from the logfile
  with open(LOGFILE, 'r') as log:
    messages = log.readlines();
  #Display the last /_nprint/ messages
  print(col.WHT + "Displaying last " + str(_nprint) + " messages..." + col.BLN)
  for m in reversed(messages[-_nprint:]):
    #Skip empty lines
    if not m == "\n":
      #Split each log entry at its semicolons and get a list of parts
      fields = SEMICOLON.split(m.strip())[1::2]
      #If we're simulating actual notifications
      if simulate:
        time.sleep(_sleeptime)
        #Build our notify-send command
        cmdlist=buildCommandList(fields)
        #Print out the command we'll be executing for debug purposes
        print(' '.join(cmdlist))
        #Call notify-send with the collected data
        subprocess.Popen(cmdlist, stdout=subprocess.PIPE)
      #If we're just printing to the command line
      else:
        for p in fields:
          p = p.split(":",1)
          if p[0] == "TIME":
            print(col.CYN + p[0] + ": " + p[1] + col.BLN)
          else:
            print("  " + col.YLW + p[0] + ": " + p[1] + col.BLN)
#Configure command line arguments for the parser
def configParser():
  parser = argparse.ArgumentParser()
  mode = parser.add_mutually_exclusive_group()
  mode.add_argument("-d", "--daemon",   help="collect mode",                       action="store_true")
  mode.add_argument("-k", "--kill",     help="kill the currently running daemon",  action="store_true")
  mode.add_argument("-p", "--prints",   help="print mode",                         action="store_true")
  mode.add_argument("-s", "--simulate", help="simulate mode",                      action="store_true")
  mode.add_argument("-c", "--clear",    help="clear the logfile",                  action="store_true")
  parser.add_argument("-q", "--quiet",  help="run quietly",                        action="store_true")
  parser.add_argument("--persist",      help="don't close messages until clicked", action="store_true")
  parser.add_argument("-n", type=int,   help="max number of messages to show")
  parser.add_argument("-w", type=int,   help="time in ms between messages")
  parser.add_argument("-t", type=int,   help="time in ms to show each message")
  return parser
#Generate a random string of characters
def namegen(size=6, chars=string.ascii_uppercase + string.digits):
  s = ''.join(random.choice(chars) for _ in range(size))
  return s
#TGA handling code adapted from http://wiki.python.org.br//ImagemTGA
# Author: João S. O. Bueno, adapted by Patrick Crain for notify-history
# License: Creative Commons, Attribution Required.
def savedatatoimage(width,height,bytes,data,fname):
  #Swap the red and blue channels
  for y in range(0,height):
    for x in range(0,width):
      o = (y * width + x) * bytes
      b = data[o]; r = data[o+2]
      data[o] = r
      data[o+2] = b
  #Flip the image on its y axis
  for y in range(0,int(height/2)):
    for x in range(0,width):
      top = (y          * width + x) * bytes
      bot = ((height-y-1) * width + x) * bytes
      r = data[top]; g = data[top+1]; b = data[top+2];
      data[top] = data[bot]
      data[bot] = r
      data[top+1] = data[bot+1]
      data[bot+1] = g
      data[top+2] = data[bot+2]
      data[bot+2] = b
      if bytes == 4:
        a = data[top+3];
        data[top+3] = data[bot+3]
        data[bot+3] = a
  #Pack the TARGA header
  header = struct.pack(
    TGA_StructFmt, TGA_Offset, TGA_ColorType, TGA_ImageType, TGA_PaletteStart, TGA_PaletteLen,
    TGA_PalBits,TGA_XOrigin, TGA_YOrigin, width, height,8*bytes, TGA_Orientation
  )
  #Write the header and data to a temporary file
  datafile = open(fname, "wb")
  datafile.write(header)
  datafile.write(data)
  datafile.close()

##############
#Main Program#
##############
def main():
  global _nprint, _sleeptime, _showtime, _persist, _quiet, _simulate
  parser = configParser()
  args = parser.parse_args()
  if args.n:
    _nprint = args.n
  if args.w:
    _sleeptime = args.w/1000
  if args.t:
    _showtime = args.t
  if args.persist:
    _persist = True
  if args.quiet:
    _quiet = True
  if args.kill:
    if sig_pid(int(open(PIDFILE).read()),9):
      print(col.WHT + "Daemon killed!" + col.BLN)
    else:
      print(col.WHT + "Nothing to kill!" + col.BLN)
    sys.exit()
  if args.clear:
    #Don't allow this with a running daemon
    write_pidfile_or_die(PIDFILE)
    print(col.WHT + "Clearing all logged notifications" + col.BLN)
    os.remove(LOGFILE)
  elif args.prints:
    display(False)
  elif args.simulate:
    _simulate=True
    display(True)
  elif args.daemon:
    #Don't allow multiple instances of the daemon
    write_pidfile_or_die(PIDFILE)
    execute(CMD)
  else:
    parser.print_help()
if __name__ == "__main__":
  main()
